{-
Starting with 1 and spiralling anticlockwise in the following way, a square spiral with side length 7 is formed.

37 36 35 34 33 32 31
38 17 16 15 14 13 30
39 18  5  4  3 12 29
40 19  6  1  2 11 28
41 20  7  8  9 10 27
42 21 22 23 24 25 26
43 44 45 46 47 48 49

It is interesting to note that the odd squares lie along the bottom right diagonal, but what is more interesting 
is that 8 out of the 13 numbers lying along both diagonals are prime; that is, a ratio of 8/13  62%.

If one complete new layer is wrapped around the spiral above, a square spiral with side length 9 will be formed. 
If this process is continued, what is the side length of the square spiral for which the ratio of primes along 
both diagonals first falls below 10%?
-}

import Data.MemoCombinators as Memo
import Data.Numbers.Primes
import Debug.Trace

-- We first import the function we created in Problem #28

-- Define a function to calculate the sum of the cross diagonal
crossDiagSum :: Integer -> Integer
crossDiagSum n
	| even n = error "You entered an even side length!"
	| n == 1 = 1
	| n == 3 = 24
	| otherwise =  4*cn + 6*(n-1)
	where
		lastSum = crossDiagSum (n-2)
		cn = 3*((n-2)-1) + ((lastSum - 6*((n-2)-1)) `div` 4) + (n-1)
		
-- Given the sum, Sn, it is easy to check that the smallest corner, an, is given by
-- an = (Sn - 6*(n-1)) / 4

-- We create a function to return a list of the four diagonals for a given length n
ulamCorners :: Integer -> [Integer]
ulamCorners n = [an, an + n - 1, an + 2*n - 2, an + 3*n - 3] where
	sn = crossDiagSum n
	an = (sn - 6*(n-1)) `div` 4
	
-- Define a function to find the number of primes in the result of the above
ulamPrimes ulam = (length . (filter isPrime)) ulam

-- Create a list of the number of primes for the corners of square length n, n+2
-- Memoization is key
ulamLst = [ulams | n <- [1,1+2..], let ulams = (ulamPrimes . (Memo.integral ulamCorners)) n]

-- Accumulate until below 0.1
findUlamLim limit ulams =  findUlamLim' 1 1 limit ulams where
	findUlamLim' ctr acc limit ulams
		| ctr == 1 = findUlamLim' (ctr + 2) acc limit (tail ulams) -- Special case
		| ratio < limit = ctr
		| otherwise = findUlamLim' (ctr + 2) (acc + (head ulams)) limit (tail ulams)
		where ratio = (fromIntegral acc) / (fromIntegral ((ctr-1) `div` 2) + 1)

-- Print and write out the answer
main = do
		let ans = findUlamLim 0.1 ulamLst
		print ans